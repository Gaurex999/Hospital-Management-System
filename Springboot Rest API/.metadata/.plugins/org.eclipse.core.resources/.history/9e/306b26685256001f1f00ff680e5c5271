package com.example.demo.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entities.DoctorEntity;
import com.example.demo.services.DoctorService;

@RestController
@RequestMapping("/api/doctors")
public class DoctorController {
	 @Autowired
	    private DoctorService doctorService;

	    @GetMapping
	    public ResponseEntity<List<DoctorEntity>> getAllDoctors() {
	        List<DoctorEntity> doctors = doctorService.getAllDoctors();
	        return new ResponseEntity<>(doctors, HttpStatus.OK);
	    }

	    @GetMapping("/{id}")
	    public ResponseEntity<DoctorEntity> getDoctorById(@RequestParam("id") int doctorId) {
	        Optional<DoctorEntity> doctor = doctorService.getDoctorById(doctorId);
	        return doctor.map(value -> new ResponseEntity<>(value, HttpStatus.OK))
	                     .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
	    }
	    
	    

	    @PostMapping
	    public ResponseEntity<DoctorEntity> createDoctor(@RequestBody DoctorEntity doctor) {
	        DoctorEntity newDoctor = doctorService.saveDoctor(doctor);
	        return new ResponseEntity<>(newDoctor, HttpStatus.CREATED);
	    }

	    @PutMapping("/{id}")
	    public ResponseEntity<DoctorEntity> updateDoctor(@PathVariable("id") int doctorId, @RequestBody DoctorEntity doctorDetails) {
	        Optional<DoctorEntity> doctor = doctorService.getDoctorById(doctorId);
	        
	        if (doctor.isPresent()) {
	            DoctorEntity updatedDoctor = doctor.get();
	            updatedDoctor.setFirstName(doctorDetails.getFirstName());
	            updatedDoctor.setLastName(doctorDetails.getLastName());
	            updatedDoctor.setAddress(doctorDetails.getAddress());
	            updatedDoctor.setQualification(doctorDetails.getQualification());
	            updatedDoctor.setContactNo(doctorDetails.getContactNo());
	            updatedDoctor.setEmailId(doctorDetails.getEmailId());
	            updatedDoctor.setAadharNo(doctorDetails.getAadharNo());
	            updatedDoctor.setDepartmentId(doctorDetails.getDepartmentId());

	            final DoctorEntity savedDoctor = doctorService.saveDoctor(updatedDoctor);
	            return new ResponseEntity<>(savedDoctor, HttpStatus.OK);
	        } else {
	            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	        }
	    }

	    @DeleteMapping("/{id}")
	    public ResponseEntity<Void> deleteDoctor(@PathVariable("id") int doctorId) {
	        doctorService.deleteDoctor(doctorId);
	        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	    }
	}


